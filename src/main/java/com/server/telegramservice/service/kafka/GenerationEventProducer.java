package com.server.telegramservice.service.kafka;

import com.server.telegramservice.dto.requests.GenerationRequestDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;

import java.util.concurrent.CompletableFuture;

@Service
@Slf4j
@RequiredArgsConstructor
public class GenerationEventProducer {
    private final KafkaTemplate<String, String> kafkaTemplate;
    private final ObjectMapper objectMapper;

    @Value("${spring.kafka.topics.generation-requests}")
    private String generationRequestsTopic;

    public void sendGenerationRequest(String operationId, GenerationRequestDTO dto) {
        try {
            String message = objectMapper.writeValueAsString(dto);

            log.info("üì® [{}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ Kafka: {}",
                    operationId, generationRequestsTopic);

            CompletableFuture<SendResult<String, String>> future =
                    kafkaTemplate.send(generationRequestsTopic, operationId, message);

            future.whenComplete((result, exception) -> {
                if (exception == null) {
                    log.debug("‚úÖ [{}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka, offset: {}",
                    operationId, result.getRecordMetadata().offset());

                }
                else {
                    log.error("‚ùå [{}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {}",
                            operationId, exception.getMessage());
                }
            });

        } catch (Exception e) {
            log.error("‚ùå [{}] –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Kafka: {}", operationId, e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", e);
        }
    }
}
