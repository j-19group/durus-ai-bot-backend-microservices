package com.server.telegramservice.telegram_bots;

import com.server.telegramservice.entity.enums.*;
import com.server.telegramservice.entity.telegram.ChatSession;
import com.server.telegramservice.entity.telegram.User;
import com.server.telegramservice.service.ai.chat.ChatService;
import com.server.telegramservice.telegram_bots.chat.impl.ChatPersistenceService;
import com.server.telegramservice.dto.requests.*;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.service.OpenAiService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.server.telegramservice.telegram_bots.chat.BotMessageBuilder;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Component
@RequiredArgsConstructor
@Slf4j
public class PhotoBot extends AbstractTelegramBot {

    private final OpenAiService openAiService;
    @Value("${telegrambots.bots[2].username}")
    private String botUsername;

    @Value("${telegrambots.bots[2].token}")
    private String botToken;

    @Qualifier("openAiChatService")
    private final ChatService chatService;

    @Qualifier("photoBotMessageBuilder")
    private final BotMessageBuilder botMessageBuilder;

    private final ChatPersistenceService chatPersistenceService;

    // –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    private final Map<String, GenerationRequestDTO> userGenerationCache = new ConcurrentHashMap<>();

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    private static final String SYSTEM_PROMPT_ANALYSIS = """
        –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ.
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
        1. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        2. –ö–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω—É–∂–µ–Ω (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
        3. –ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        
        –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è - –∑–∞–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —á—Ç–æ —Ç–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ –∏ —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ CREATE; 
        """;

    private static final String SYSTEM_PROMPT_CHAT = """
        –¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ.
        –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –æ–±—ä—è—Å–Ω—è–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
        –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.
        """;


    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage()) {
                handleMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {}", e.getMessage(), e);

            Long chatId = null;
            if (update.hasMessage()) {
                chatId = update.getMessage().getChatId();
            } else if (update.hasCallbackQuery()) {
                chatId = update.getCallbackQuery().getMessage().getChatId();
            }

            if (chatId != null) {
                sendErrorMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
        }
    }

    @Override
    protected void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String messageText = message.getText();

        log.info("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}: {}", chatId, messageText);

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏—é
        User user = getOrCreateUser(message);
        ChatSession session = chatPersistenceService.getOrCreateActiveSession(user);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chatPersistenceService.saveMessage(session, Sender.USER, messageText, Bot.PHOTO_BOT, MessageType.TELEGRAM);

        if (messageText.equals("/start")) {
            handleStartCommand(chatId, user);
        } else if (messageText.equals("/help")) {
            handleHelpCommand(chatId);
        } else if (messageText.equals("/new")) {
            handleNewCommand(chatId, user);
        } else if (isMediaGenerationRequest(messageText)) {
            handleMediaGenerationRequest(chatId, messageText, session);
        } else {
            handleTextChat(chatId, messageText, session);
        }
    }


    protected void handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        String userId = String.valueOf(callbackQuery.getFrom().getId());

        log.info("üîò Callback –æ—Ç {}: {}", chatId, callbackData);

        try {
            if (callbackData.startsWith("style_")) {
                handleStyleSelection(chatId, userId, callbackData);
            } else if (callbackData.startsWith("format_")) {
                handleFormatSelection(chatId, userId, callbackData);

            } else if (callbackData.equals("confirm_generation")) {
             handleGenerationConfirmation(chatId, userId);
            } else if (callbackData.equals("edit_parameters")) {
                handleParameterEdit(chatId, userId);
            } else if (callbackData.startsWith("rate_")) {
                handleRating(chatId, callbackData);
            }

            // –£–¥–∞–ª—è–µ–º inline keyboard
            org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup editMarkup =
                    new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup();
            editMarkup.setChatId(chatId);
            editMarkup.setMessageId(callbackQuery.getMessage().getMessageId());
            editMarkup.setReplyMarkup(null);
            execute(editMarkup);

        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {}", e.getMessage());
        }
    }

    private void handleGenerationConfirmation(Long chatId, String userId) {
        if isMediaGenerationRequest()
          handleMediaGenerationRequest
                  —Ç—É—Ç –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –µ—â –µ—Ä–∞–∑
    }

    private void handleStartCommand(Long chatId, User user) {
        String botName = botMessageBuilder.getBotDisplayName();
        String capabilities = botMessageBuilder.getBotCapabilities();

        String welcomeMessage = String.format("""
            üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ %s, %s!
            
            %s
            
            –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å!
            
            üåü –ü—Ä–∏–º–µ—Ä—ã:
            ‚Ä¢ "–ö–æ—Ç-–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç –≤ –∫–æ—Å–º–æ—Å–µ"
            ‚Ä¢ "–î–µ–≤—É—à–∫–∞ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ —Å –≥–æ–ª—É–±—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏"
            ‚Ä¢ "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂ –≤ —Å—Ç–∏–ª–µ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º"
            ‚Ä¢ "–ü–æ—Ä—Ç—Ä–µ—Ç –≤ –≥–æ—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ"
            
            üìã –ö–æ–º–∞–Ω–¥—ã:
            /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
            /new - –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            """,
                botName,
                user.getUsername() != null ? user.getUsername() : "–¥—Ä—É–≥",
                capabilities
        );

        sendTextMessage(chatId, welcomeMessage);
    }

    private void handleHelpCommand(Long chatId) {
        String helpMessage = botMessageBuilder.getHelpContent();
        sendTextMessage(chatId, helpMessage);
    }

    private void handleNewCommand(Long chatId, User user) {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        String userId = String.valueOf(user.getTelegramId());
        userGenerationCache.remove(userId);

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        chatPersistenceService.endActiveSession(user);
        ChatSession newSession = chatPersistenceService.getOrCreateActiveSession(user);

        sendTextMessage(chatId, "üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç! –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.");
    }

    private boolean isMediaGenerationRequest(String text) {
        if (text == null || text.trim().isEmpty()) {
            return false;
        }

        final String CLASSIFICATION_PROMPT = """
        –¢—ã - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤. –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
        –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".
        
        –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:
        - "–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ"
        - "–ù–∞—Ä–∏—Å—É–π –ø–µ–π–∑–∞–∂ –∑–∞–∫–∞—Ç–∞ –≤ –≥–æ—Ä–∞—Ö"
        - "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ"
        - "–í–∏–¥–µ–æ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –∫–∏—Ç–∞–º–∏ –≤ –∫–æ—Å–º–æ—Å–µ"
        - "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞"
        
        –ü—Ä–∏–º–µ—Ä—ã –ù–ï –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:
        - "–ü—Ä–∏–≤–µ—Ç"
        - "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        - "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
        - "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
        - "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å –∏–¥–µ–µ–π"
        """;

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å
            ChatCompletionResult result = chatService.generateResponse(
                    "–ó–∞–ø—Ä–æ—Å: " + text + "\n\n–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
                    CLASSIFICATION_PROMPT
            );

            String response = result.getChoices().get(0).getMessage().getContent().trim().toLowerCase();

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            boolean isMediaRequest = response.contains("–¥–∞") ||
                    response.contains("yes") ||
                    response.contains("1");



            return isMediaRequest;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage());
            throw e;
        }
    }

    private void handleMediaGenerationRequest(Long chatId, String prompt, ChatSession session) {
        String userId = String.valueOf(session.getUser().getTelegramId());

        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            final String ANALYSIS_PROMPT = """
            –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
            –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".
            
            –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏:
            - –ï—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç/—Å—É–±—ä–µ–∫—Ç
            - –£–∫–∞–∑–∞–Ω —Å—Ç–∏–ª—å –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            - –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
            """;

            ChatCompletionResult analysis = chatService.generateResponseWithContext(
                    "–ó–∞–ø—Ä–æ—Å: " + prompt,
                    ANALYSIS_PROMPT,session
            );

            String analysisResult = analysis.getChoices().get(0).getMessage().getContent().toLowerCase().trim();
            boolean isSufficient = analysisResult.contains("–¥–∞");



            GenerationRequestDTO dto = new GenerationRequestDTO();
            dto.setPrompt(prompt);
            dto.setUserId(Long.parseLong(userId));
            dto.setChatId(chatId);
            dto.setMediaType(MediaType.IMAGE);

            if (isSufficient) {
                showGenerationPreview(chatId, dto);
            } else {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                requestAdditionalDetails(chatId, prompt, dto);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage());
            sendErrorMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.");
        }
    }

    private void requestAdditionalDetails(Long chatId, String originalPrompt, GenerationRequestDTO dto) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            final String DETAILS_PROMPT = """
            –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. 
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π –≤ –∑–∞–ø—Ä–æ—Å–µ: 
            "%s"
            
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É—Ç–æ—á–Ω–∏—Ç—å:
            1. –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            2. –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞
            3. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            4. –¶–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É
            
            –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Å–∞–º–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
            """;

            ChatCompletionResult detailsResponse = chatService.generateResponse(
                    String.format(DETAILS_PROMPT, originalPrompt),
                    ""
            );

            String questions = detailsResponse.getChoices().get(0).getMessage().getContent();


            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("üñåÔ∏è –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏:\n\n" + questions);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            keyboard.setKeyboard(Collections.singletonList(
                    Collections.singletonList(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_generation"))
            ));
            message.setReplyMarkup(keyboard);

            execute(message);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π: {}", e.getMessage());
            sendTextMessage(chatId, "üñåÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–∞, –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞)");
        }
    }


    private void askForClarification(Long chatId, GenerationRequestDTO dto, String analysisResult) {
        if (dto.getStyle() == null) {
            askForStyle(chatId);
        } else if (dto.getAspectRatio() == null) {
            askForFormat(chatId);
        } else {
            // –ï—Å–ª–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            autoSelectModel(dto);
            showGenerationPreview(chatId, dto);
        }
    }

    private void askForStyle(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = Arrays.asList(
                Arrays.asList(
                        botMessageBuilder.createInlineButton("üì∏ –†–µ–∞–ª–∏–∑–º", "style_realism"),
                        botMessageBuilder.createInlineButton("üå∏ –ê–Ω–∏–º–µ", "style_anime")
                ),
                Arrays.asList(
                        botMessageBuilder.createInlineButton("üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "style_artistic"),
                        botMessageBuilder.createInlineButton("üî• –ì—Ä–∞–Ω–∂", "style_grunge")
                ),
                Arrays.asList(
                         botMessageBuilder.createInlineButton("üöÄ –ö–∏–±–µ—Ä–ø–∞–Ω–∫", "style_cyberpunk"),
                         botMessageBuilder.createInlineButton("üåÖ –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º", "style_impressionism")
                ),
                Arrays.asList(
                         botMessageBuilder.createInlineButton("üñ§ –ì–æ—Ç–∏–∫–∞", "style_gothic"),
                         botMessageBuilder.createInlineButton("üåà –ü–æ–ø-–∞—Ä—Ç", "style_pop_art")
                ),
                Arrays.asList(
                         botMessageBuilder.createInlineButton("üèõÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "style_classical"),
                         botMessageBuilder.createInlineButton("üåä –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è", "style_abstract")
                ),
                Arrays.asList(
                         botMessageBuilder.createInlineButton("üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º", "style_surrealism"),
                         botMessageBuilder.createInlineButton("üèôÔ∏è –ú–æ–¥–µ—Ä–Ω", "style_modern")
                ),
                Arrays.asList(
                         botMessageBuilder.createInlineButton("‚úèÔ∏è –≠—Å–∫–∏–∑", "style_sketch"),
                         botMessageBuilder.createInlineButton("üñºÔ∏è –í–∏–Ω—Ç–∞–∂", "style_vintage")
                ),
                Arrays.asList(
                         botMessageBuilder.createInlineButton("‚ú® –°–≤–æ–π —Å—Ç–∏–ª—å", "style_custom")
                )
        );
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–∏–ª–µ–π: {}", e.getMessage());
        }
    }

    private void askForFormat(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = Arrays.asList(
                Arrays.asList(botMessageBuilder.createInlineButton("‚¨ú –ö–≤–∞–¥—Ä–∞—Ç (1:1)", "format_square")),
                Arrays.asList(botMessageBuilder.createInlineButton("üì∫ –®–∏—Ä–æ–∫–∏–π (16:9)", "format_wide")),
                Arrays.asList(botMessageBuilder.createInlineButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)", "format_vertical"))
        );
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤: {}", e.getMessage());
        }
    }

    private void handleStyleSelection(Long chatId, String userId, String callbackData) {
        GenerationRequestDTO dto = userGenerationCache.get(userId);
        if (dto == null) return;
        String style = callbackData.replace("style_", "");

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω custom style, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π
        if ("custom".equals(style)) {
            sendTextMessage(chatId, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≤ —Å—Ç–∏–ª–µ –í–∞–Ω –ì–æ–≥–∞', '–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–Ω–µ–æ–Ω'):");
            // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–ª—å
            dto.setStyle("awaiting_custom");
            return;
        }

        dto.setStyle(style);

        sendTextMessage(chatId, "‚úÖ –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: " + getStyleDisplayName(style));

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if (dto.getAspectRatio() == null) {
            askForFormat(chatId);
        } else {
            showGenerationPreview(chatId, dto);
        }
    }

    private void handleFormatSelection(Long chatId, String userId, String callbackData) {
        GenerationRequestDTO dto = userGenerationCache.get(userId);
        if (dto == null) return;

        String format = callbackData.replace("format_", "");
        dto.setAspectRatio(getAspectRatioFromFormat(format));

        sendTextMessage(chatId, "‚úÖ –§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: " + getFormatDisplayName(format));

        // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –ø–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é
        autoSelectModel(dto);
        showGenerationPreview(chatId, dto);
    }



    private void showGenerationPreview(Long chatId, GenerationRequestDTO dto) {
        String preview = String.format("""
            üëÅÔ∏è **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
            üé® **–¢–∏–ø:** %s
            üé≠ **–°—Ç–∏–ª—å:** %s
            üìê **–§–æ—Ä–º–∞—Ç:** %s
            
            –í—Å—ë –≤–µ—Ä–Ω–æ?
            """,
                dto.getMediaType() == MediaType.IMAGE ? "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" : "–í–∏–¥–µ–æ",
                getStyleDisplayName(dto.getStyle()),
                dto.getAspectRatio()
        );

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(preview);
        message.setParseMode("Markdown");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = Arrays.asList(
                Arrays.asList(
                        botMessageBuilder.createInlineButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", "confirm_generation"),
                        botMessageBuilder.createInlineButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "edit_parameters")
                )
        );
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é: {}", e.getMessage());
        }
    }


    private void handleParameterEdit(Long chatId, String userId) {
        sendTextMessage(chatId, "‚úèÔ∏è –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?");
        askForStyle(chatId);
    }

    private void showRatingKeyboard(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("‚≠ê –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = Arrays.asList(
                botMessageBuilder.createInlineButton("1‚≠ê", "rate_1"),
                botMessageBuilder.createInlineButton("2‚≠ê", "rate_2"),
                botMessageBuilder.createInlineButton("3‚≠ê", "rate_3"),
                botMessageBuilder.createInlineButton("4‚≠ê", "rate_4"),
                botMessageBuilder.createInlineButton("5‚≠ê", "rate_5")
        );
        keyboard.setKeyboard(Arrays.asList(row));
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }

    private void handleRating(Long chatId, String callbackData) {
        int rating = Integer.parseInt(callbackData.replace("rate_", ""));

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        log.info("üìä –ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", rating, chatId);

        String response = rating >= 4 ?
                "üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É! –†–∞–¥, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!" :
                "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ª—É—á—à–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.";

        sendTextMessage(chatId, response);
    }

    private void handleTextChat(Long chatId, String messageText, ChatSession session) {
        String userId = String.valueOf(session.getUser().getTelegramId());
        GenerationRequestDTO dto = userGenerationCache.get(userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–ª—å
        if (dto != null && "awaiting_custom".equals(dto.getStyle())) {
            dto.setStyle(messageText);
            sendTextMessage(chatId, "‚úÖ –í–∞—à —Å—Ç–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + messageText);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            if (dto.getAspectRatio() == null) {
                askForFormat(chatId);
            } else {
                showGenerationPreview(chatId, dto);
            }
            return;
        }

        try {
            ChatCompletionResult response = chatService.generateResponseWithContext(
                    messageText, SYSTEM_PROMPT_CHAT, session);

            String botResponse = response.getChoices().get(0).getMessage().getContent();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            chatPersistenceService.saveMessage(session, Sender.BOT, botResponse, Bot.PHOTO_BOT, MessageType.TELEGRAM);

            sendTextMessage(chatId, botResponse);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {}", e.getMessage());
            sendErrorMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private User getOrCreateUser(Message message) {
        return chatPersistenceService.getOrCreateUser(
                message.getFrom().getId().longValue(),
                message.getFrom().getUserName()
        );
    }

    private void sendTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    protected void sendErrorMessage(Long chatId, String errorText) {
        sendTextMessage(chatId, "‚ùå " + errorText);
    }

    private void sendPhoto(Long chatId, String photoUrl) {
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(chatId);
        sendPhoto.setPhoto(new InputFile(photoUrl));

        try {
            execute(sendPhoto);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {}", e.getMessage());
            sendErrorMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
        }
    }

    private void sendVideo(Long chatId, String videoUrl) {
        SendDocument sendDocument = new SendDocument();
        sendDocument.setChatId(chatId);
        sendDocument.setDocument(new InputFile(videoUrl));

        try {
            execute(sendDocument);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {}", e.getMessage());
            sendErrorMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.");
        }
    }



    private String getStyleDisplayName(String style) {
        return switch (style) {
            case "realism" -> "üì∏ –†–µ–∞–ª–∏–∑–º";
            case "anime" -> "üå∏ –ê–Ω–∏–º–µ";
            case "artistic" -> "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π";
            case "grunge" -> "üî• –ì—Ä–∞–Ω–∂";
            case "cyberpunk" -> "üöÄ –ö–∏–±–µ—Ä–ø–∞–Ω–∫";
            case "impressionism" -> "üåÖ –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º";
            case "gothic" -> "üñ§ –ì–æ—Ç–∏–∫–∞";
            case "pop_art" -> "üåà –ü–æ–ø-–∞—Ä—Ç";
            case "classical" -> "üèõÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π";
            case "abstract" -> "üåä –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è";
            case "surrealism" -> "üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º";
            case "modern" -> "üèôÔ∏è –ú–æ–¥–µ—Ä–Ω";
            case "sketch" -> "‚úèÔ∏è –≠—Å–∫–∏–∑";
            case "vintage" -> "üñºÔ∏è –í–∏–Ω—Ç–∞–∂";
            case "awaiting_custom" -> "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞...";
            default -> "‚ú® " + style; // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
        };
    }

    private String getFormatDisplayName(String format) {
        return switch (format) {
            case "square" -> "–ö–≤–∞–¥—Ä–∞—Ç (1:1)";
            case "wide" -> "–®–∏—Ä–æ–∫–∏–π (16:9)";
            case "vertical" -> "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)";
            default -> format;
        };
    }

    private String getAspectRatioFromFormat(String format) {
        return switch (format) {
            case "square" -> "1:1";
            case "wide" -> "16:9";
            case "vertical" -> "9:16";
            default -> "1:1";
        };
    }



    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}