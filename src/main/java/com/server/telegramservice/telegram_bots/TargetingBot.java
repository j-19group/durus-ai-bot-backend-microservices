package com.server.telegramservice.telegram_bots;

import com.server.telegramservice.entity.enums.Bot;
import com.server.telegramservice.entity.enums.MessageType;
import com.server.telegramservice.entity.telegram.ChatSession;
import com.server.telegramservice.entity.enums.Sender;
import com.server.telegramservice.entity.telegram.User;
import com.server.telegramservice.telegram_bots.chat.impl.ChatPersistenceService;
import com.server.telegramservice.service.tgchat.CommandHandlerService;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;
import com.theokanning.openai.service.OpenAiService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class TargetingBot extends TelegramLongPollingBot {

    private final OpenAiService openAiService;
    private final CommandHandlerService commandHandler;
    private final ChatPersistenceService chatPersistenceService;

    @Value("${telegrambots.bots[0].username}")
    private String botUsername;

    @Value("${telegrambots.bots[0].token}")
    private String botToken;

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String userInput = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            Long telegramId = update.getMessage().getFrom().getId();
            String username = update.getMessage().getFrom().getUserName();

            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = chatPersistenceService.getOrCreateUser(telegramId, username);

            String reply;

            if (userInput.startsWith("/")) {
                // –ö–æ–º–∞–Ω–¥–∞
                reply = commandHandler.handleCommand(userInput, username);

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /newsession ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                if (userInput.equalsIgnoreCase("/newsession")) {
                    chatPersistenceService.endActiveSession(user);
                }

            } else {
                // –í–æ–ø—Ä–æ—Å ‚Üí GPT
                ChatSession session = chatPersistenceService.getOrCreateActiveSession(user);

                // —Å–µ–π–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                chatPersistenceService.saveMessage(session, Sender.USER, userInput, Bot.TARGETOLOG, MessageType.TELEGRAM);

                // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
                reply = askAsMarketingExpert(userInput);

                // c–µ–π–≤–∏–º –æ—Ç–≤–µ—Ç
                chatPersistenceService.saveMessage(session, Sender.BOT, reply, Bot.TARGETOLOG, MessageType.TELEGRAM);
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(reply);

            try {
                execute(message);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    private String askAsMarketingExpert(String prompt) {
        ChatMessage systemPrompt = new ChatMessage(ChatMessageRole.SYSTEM.value(),
                "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥ —Å –±–æ–ª–µ–µ —á–µ–º 10 –≥–æ–¥–∞–º–∏ —Ä–∞–±–æ—Ç—ã –≤ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ. " +
                        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ Facebook Ads, Google Ads, TikTok Ads –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö. " +

                        "–¢–í–û–ò –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–í–´–ö–ò: " +
                        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤ " +
                        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π " +
                        "‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–π " +
                        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ (CTR, CPC, ROAS, LTV) " +
                        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –≤–æ—Ä–æ–Ω–∫–∞–º–∏ –ø—Ä–æ–¥–∞–∂ –∏ —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º " +

                        "–ê–õ–ì–û–†–ò–¢–ú –ù–ê–°–¢–†–û–ô–ö–ò –†–ï–ö–õ–ê–ú–´: " +
                        "1. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ " +
                        "2. –ü–æ–¥–±–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ " +
                        "3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü " +
                        "4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ " +
                        "5. –ó–∞–ø—É—Å–∫, –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è " +

                        "–ò–°–ü–û–õ–¨–ó–£–ô –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –¢–†–ò–ì–ì–ï–†–´: " +
                        "‚Ä¢ FOMO (—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å –≤—ã–≥–æ–¥—É) " +
                        "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ " +
                        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è " +
                        "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç —è–∫–æ—Ä–µ–Ω–∏—è –≤ —Ü–µ–Ω–µ " +
                        "‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è " +
                        "‚Ä¢ –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ –∏ —ç–º–æ—Ü–∏–∏ " +

                        "–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í: " +
                        "‚Ä¢ –ß—ë—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ " +
                        "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ " +
                        "‚Ä¢ –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è " +
                        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç—É –∏ —Å—Ä–æ–∫–∞–º " +

                        "–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í –î–õ–Ø –¢–ï–õ–ï–ì–†–ê–ú–ê: " +
                        "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã # –∏ ** " +
                        "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π —Ä–∞–∑–º–µ—Ç–∫—É Telegram: *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥`, ```–±–ª–æ–∫ –∫–æ–¥–∞``` " +
                        "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∑–Ω–∞–∫–∞–º–∏ ‚Äî, ‚Ä¢, 1., 2. " +
                        "‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ " +
                        "‚Ä¢ –í–µ–∑–¥–µ —É–∫–∞–∑—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–∏–º–µ—Ä—ã " +
                        "‚Ä¢ –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–Ω–≥–µ (KZT) " +
                        "‚Ä¢ –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —É–¥–æ–±–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ " +
                        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤: üéØ üìä üí∞ ‚ö° " +

                        "–í–ê–ñ–ù–û: —Ç—ã —Ç–æ–ª—å–∫–æ —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥ –∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—à—å –∑–∞ —Ä–∞–º–∫–∏ —ç—Ç–æ–π —Ä–æ–ª–∏.");
        ChatMessage userMessage = new ChatMessage(ChatMessageRole.USER.value(), prompt);

        ChatCompletionRequest request = ChatCompletionRequest.builder()
                .model("gpt-4o")
                .messages(List.of(systemPrompt, userMessage))
                .temperature(0.7)
                .maxTokens(500)
                .build();

        try {
            ChatCompletionResult result = openAiService.createChatCompletion(request);
            String response = result.getChoices().get(0).getMessage().getContent();
            return response;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: " + e.getMessage());
            return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}

